//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace ExampleRepoClient.RepositoryServer {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="AbstractUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.WindowsLoginUserContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.WebHostWrappedUserContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.GuestUserContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.ImpersonateUserContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.SessionUserContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.PasswordCredentialsUserContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.FacebookCredentialsUserContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.SecuredUserContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.LocalImpersonationContext))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.LocalMachineUserContext))]
    public partial class AbstractUserContext : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BrowserUserAgentField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ClientEventSessionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExampleRepoClient.RepositoryServer.DisplayType DisplayTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool StudioPortalField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BrowserUserAgent {
            get {
                return this.BrowserUserAgentField;
            }
            set {
                if ((object.ReferenceEquals(this.BrowserUserAgentField, value) != true)) {
                    this.BrowserUserAgentField = value;
                    this.RaisePropertyChanged("BrowserUserAgent");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ClientEventSessionId {
            get {
                return this.ClientEventSessionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ClientEventSessionIdField, value) != true)) {
                    this.ClientEventSessionIdField = value;
                    this.RaisePropertyChanged("ClientEventSessionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExampleRepoClient.RepositoryServer.DisplayType DisplayType {
            get {
                return this.DisplayTypeField;
            }
            set {
                if ((this.DisplayTypeField.Equals(value) != true)) {
                    this.DisplayTypeField = value;
                    this.RaisePropertyChanged("DisplayType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool StudioPortal {
            get {
                return this.StudioPortalField;
            }
            set {
                if ((this.StudioPortalField.Equals(value) != true)) {
                    this.StudioPortalField = value;
                    this.RaisePropertyChanged("StudioPortal");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WindowsLoginUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class WindowsLoginUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string AccountNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string AccountName {
            get {
                return this.AccountNameField;
            }
            set {
                if ((object.ReferenceEquals(this.AccountNameField, value) != true)) {
                    this.AccountNameField = value;
                    this.RaisePropertyChanged("AccountName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="WebHostWrappedUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class WebHostWrappedUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CallingIPField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExampleRepoClient.RepositoryServer.AbstractUserContext WrappedUserContextField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CallingIP {
            get {
                return this.CallingIPField;
            }
            set {
                if ((object.ReferenceEquals(this.CallingIPField, value) != true)) {
                    this.CallingIPField = value;
                    this.RaisePropertyChanged("CallingIP");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExampleRepoClient.RepositoryServer.AbstractUserContext WrappedUserContext {
            get {
                return this.WrappedUserContextField;
            }
            set {
                if ((object.ReferenceEquals(this.WrappedUserContextField, value) != true)) {
                    this.WrappedUserContextField = value;
                    this.RaisePropertyChanged("WrappedUserContext");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="GuestUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class GuestUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ImpersonateUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class ImpersonateUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdentifierField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExampleRepoClient.RepositoryServer.AbstractUserContext RealUserContextField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExampleRepoClient.RepositoryServer.UserIdentifierType TypeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Identifier {
            get {
                return this.IdentifierField;
            }
            set {
                if ((object.ReferenceEquals(this.IdentifierField, value) != true)) {
                    this.IdentifierField = value;
                    this.RaisePropertyChanged("Identifier");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExampleRepoClient.RepositoryServer.AbstractUserContext RealUserContext {
            get {
                return this.RealUserContextField;
            }
            set {
                if ((object.ReferenceEquals(this.RealUserContextField, value) != true)) {
                    this.RealUserContextField = value;
                    this.RaisePropertyChanged("RealUserContext");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExampleRepoClient.RepositoryServer.UserIdentifierType Type {
            get {
                return this.TypeField;
            }
            set {
                if ((this.TypeField.Equals(value) != true)) {
                    this.TypeField = value;
                    this.RaisePropertyChanged("Type");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class SessionUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SessionValueField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SessionValue {
            get {
                return this.SessionValueField;
            }
            set {
                if ((object.ReferenceEquals(this.SessionValueField, value) != true)) {
                    this.SessionValueField = value;
                    this.RaisePropertyChanged("SessionValue");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="PasswordCredentialsUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class PasswordCredentialsUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PasswordField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string UserIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Password {
            get {
                return this.PasswordField;
            }
            set {
                if ((object.ReferenceEquals(this.PasswordField, value) != true)) {
                    this.PasswordField = value;
                    this.RaisePropertyChanged("Password");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string UserID {
            get {
                return this.UserIDField;
            }
            set {
                if ((object.ReferenceEquals(this.UserIDField, value) != true)) {
                    this.UserIDField = value;
                    this.RaisePropertyChanged("UserID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FacebookCredentialsUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class FacebookCredentialsUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FacebookIDField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FacebookID {
            get {
                return this.FacebookIDField;
            }
            set {
                if ((object.ReferenceEquals(this.FacebookIDField, value) != true)) {
                    this.FacebookIDField = value;
                    this.RaisePropertyChanged("FacebookID");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SecuredUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class SecuredUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string SecuredKeyField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string SecuredKey {
            get {
                return this.SecuredKeyField;
            }
            set {
                if ((object.ReferenceEquals(this.SecuredKeyField, value) != true)) {
                    this.SecuredKeyField = value;
                    this.RaisePropertyChanged("SecuredKey");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalImpersonationContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class LocalImpersonationContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="LocalMachineUserContext", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class LocalMachineUserContext : ExampleRepoClient.RepositoryServer.AbstractUserContext {
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DisplayType", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Services." +
        "Folder")]
    public enum DisplayType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Silverlight = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Html = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HtmlWithSilverlight = 3,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HtmlMobile = 4,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HtmlTablet = 5,
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="UserIdentifierType", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    public enum UserIdentifierType : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        AccountID = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        EmailAddress = 1,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
        "")]
    [System.SerializableAttribute()]
    public partial class FrameworkFault : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int ErrorCodeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MessageField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int ErrorCode {
            get {
                return this.ErrorCodeField;
            }
            set {
                if ((this.ErrorCodeField.Equals(value) != true)) {
                    this.ErrorCodeField = value;
                    this.RaisePropertyChanged("ErrorCode");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Message {
            get {
                return this.MessageField;
            }
            set {
                if ((object.ReferenceEquals(this.MessageField, value) != true)) {
                    this.MessageField = value;
                    this.RaisePropertyChanged("Message");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModuleInfoFile", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.FileCheckinInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.ResourceCheckinInfo))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.ServerModuleInfoFile))]
    public partial class ModuleInfoFile : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool HasPreviewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByMachineField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedOnRevisionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PathField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool HasPreview {
            get {
                return this.HasPreviewField;
            }
            set {
                if ((this.HasPreviewField.Equals(value) != true)) {
                    this.HasPreviewField = value;
                    this.RaisePropertyChanged("HasPreview");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedByMachine {
            get {
                return this.ModifiedByMachineField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByMachineField, value) != true)) {
                    this.ModifiedByMachineField = value;
                    this.RaisePropertyChanged("ModifiedByMachine");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedOnRevisionId {
            get {
                return this.ModifiedOnRevisionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedOnRevisionIdField, value) != true)) {
                    this.ModifiedOnRevisionIdField = value;
                    this.RaisePropertyChanged("ModifiedOnRevisionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Path {
            get {
                return this.PathField;
            }
            set {
                if ((object.ReferenceEquals(this.PathField, value) != true)) {
                    this.PathField = value;
                    this.RaisePropertyChanged("Path");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileCheckinInfo", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class FileCheckinInfo : ExampleRepoClient.RepositoryServer.ModuleInfoFile {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NoteField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ResourceCheckinInfo", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class ResourceCheckinInfo : ExampleRepoClient.RepositoryServer.ModuleInfoFile {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ActionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsDeletedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsNewField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsUpdatedField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RevisionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ShortTypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Action {
            get {
                return this.ActionField;
            }
            set {
                if ((object.ReferenceEquals(this.ActionField, value) != true)) {
                    this.ActionField = value;
                    this.RaisePropertyChanged("Action");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsDeleted {
            get {
                return this.IsDeletedField;
            }
            set {
                if ((this.IsDeletedField.Equals(value) != true)) {
                    this.IsDeletedField = value;
                    this.RaisePropertyChanged("IsDeleted");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsNew {
            get {
                return this.IsNewField;
            }
            set {
                if ((this.IsNewField.Equals(value) != true)) {
                    this.IsNewField = value;
                    this.RaisePropertyChanged("IsNew");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsUpdated {
            get {
                return this.IsUpdatedField;
            }
            set {
                if ((this.IsUpdatedField.Equals(value) != true)) {
                    this.IsUpdatedField = value;
                    this.RaisePropertyChanged("IsUpdated");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RevisionId {
            get {
                return this.RevisionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionIdField, value) != true)) {
                    this.RevisionIdField = value;
                    this.RaisePropertyChanged("RevisionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ShortTypeName {
            get {
                return this.ShortTypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ShortTypeNameField, value) != true)) {
                    this.ShortTypeNameField = value;
                    this.RaisePropertyChanged("ShortTypeName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerModuleInfoFile", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class ServerModuleInfoFile : ExampleRepoClient.RepositoryServer.ModuleInfoFile {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResourceTypeField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> ServerFileTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ResourceType {
            get {
                return this.ResourceTypeField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourceTypeField, value) != true)) {
                    this.ResourceTypeField = value;
                    this.RaisePropertyChanged("ResourceType");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> ServerFileTime {
            get {
                return this.ServerFileTimeField;
            }
            set {
                if ((this.ServerFileTimeField.Equals(value) != true)) {
                    this.ServerFileTimeField = value;
                    this.RaisePropertyChanged("ServerFileTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModuleInfo", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class ModuleInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExampleRepoClient.RepositoryServer.ModuleInfoFile[] FilesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastRevisionByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.Nullable<System.DateTime> LastRevisionDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string LastRevisionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModuleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExampleRepoClient.RepositoryServer.RepositoryState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExampleRepoClient.RepositoryServer.ModuleInfoFile[] Files {
            get {
                return this.FilesField;
            }
            set {
                if ((object.ReferenceEquals(this.FilesField, value) != true)) {
                    this.FilesField = value;
                    this.RaisePropertyChanged("Files");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastRevisionBy {
            get {
                return this.LastRevisionByField;
            }
            set {
                if ((object.ReferenceEquals(this.LastRevisionByField, value) != true)) {
                    this.LastRevisionByField = value;
                    this.RaisePropertyChanged("LastRevisionBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.Nullable<System.DateTime> LastRevisionDate {
            get {
                return this.LastRevisionDateField;
            }
            set {
                if ((this.LastRevisionDateField.Equals(value) != true)) {
                    this.LastRevisionDateField = value;
                    this.RaisePropertyChanged("LastRevisionDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string LastRevisionId {
            get {
                return this.LastRevisionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.LastRevisionIdField, value) != true)) {
                    this.LastRevisionIdField = value;
                    this.RaisePropertyChanged("LastRevisionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleName {
            get {
                return this.ModuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModuleNameField, value) != true)) {
                    this.ModuleNameField = value;
                    this.RaisePropertyChanged("ModuleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExampleRepoClient.RepositoryServer.RepositoryState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryState", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    public enum RepositoryState : int {
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Unknown = 0,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Release = 1,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        HotFix = 2,
        
        [System.Runtime.Serialization.EnumMemberAttribute()]
        Development = 3,
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="SessionClientInfo", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class SessionClientInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IpAddressField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string MachineNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string PlatformVersionNumberField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string IpAddress {
            get {
                return this.IpAddressField;
            }
            set {
                if ((object.ReferenceEquals(this.IpAddressField, value) != true)) {
                    this.IpAddressField = value;
                    this.RaisePropertyChanged("IpAddress");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string MachineName {
            get {
                return this.MachineNameField;
            }
            set {
                if ((object.ReferenceEquals(this.MachineNameField, value) != true)) {
                    this.MachineNameField = value;
                    this.RaisePropertyChanged("MachineName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string PlatformVersionNumber {
            get {
                return this.PlatformVersionNumberField;
            }
            set {
                if ((object.ReferenceEquals(this.PlatformVersionNumberField, value) != true)) {
                    this.PlatformVersionNumberField = value;
                    this.RaisePropertyChanged("PlatformVersionNumber");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="FileData", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.Data.DataTypes")]
    [System.SerializableAttribute()]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.ServerFileData))]
    [System.Runtime.Serialization.KnownTypeAttribute(typeof(ExampleRepoClient.RepositoryServer.CodeFileData))]
    public partial class FileData : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private byte[] ContentsField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string FileNameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public byte[] Contents {
            get {
                return this.ContentsField;
            }
            set {
                if ((object.ReferenceEquals(this.ContentsField, value) != true)) {
                    this.ContentsField = value;
                    this.RaisePropertyChanged("Contents");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string FileName {
            get {
                return this.FileNameField;
            }
            set {
                if ((object.ReferenceEquals(this.FileNameField, value) != true)) {
                    this.FileNameField = value;
                    this.RaisePropertyChanged("FileName");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ServerFileData", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class ServerFileData : ExampleRepoClient.RepositoryServer.FileData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ServerFileTimeField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ServerFileTime {
            get {
                return this.ServerFileTimeField;
            }
            set {
                if ((this.ServerFileTimeField.Equals(value) != true)) {
                    this.ServerFileTimeField = value;
                    this.RaisePropertyChanged("ServerFileTime");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="CodeFileData", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Services." +
        "CodeBucket")]
    [System.SerializableAttribute()]
    public partial class CodeFileData : ExampleRepoClient.RepositoryServer.FileData {
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string[] DependsOnField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string TypeNameField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string[] DependsOn {
            get {
                return this.DependsOnField;
            }
            set {
                if ((object.ReferenceEquals(this.DependsOnField, value) != true)) {
                    this.DependsOnField = value;
                    this.RaisePropertyChanged("DependsOn");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Id {
            get {
                return this.IdField;
            }
            set {
                if ((object.ReferenceEquals(this.IdField, value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TypeName {
            get {
                return this.TypeNameField;
            }
            set {
                if ((object.ReferenceEquals(this.TypeNameField, value) != true)) {
                    this.TypeNameField = value;
                    this.RaisePropertyChanged("TypeName");
                }
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModuleCheckinInfo", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class ModuleCheckinInfo : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string CheckinIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string DescriptionField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private bool IsTagField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModifiedByField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModifiedDateField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NoteField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ResourcesField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RevisionIdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private ExampleRepoClient.RepositoryServer.RepositoryState StateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string CheckinId {
            get {
                return this.CheckinIdField;
            }
            set {
                if ((object.ReferenceEquals(this.CheckinIdField, value) != true)) {
                    this.CheckinIdField = value;
                    this.RaisePropertyChanged("CheckinId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Description {
            get {
                return this.DescriptionField;
            }
            set {
                if ((object.ReferenceEquals(this.DescriptionField, value) != true)) {
                    this.DescriptionField = value;
                    this.RaisePropertyChanged("Description");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public bool IsTag {
            get {
                return this.IsTagField;
            }
            set {
                if ((this.IsTagField.Equals(value) != true)) {
                    this.IsTagField = value;
                    this.RaisePropertyChanged("IsTag");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModifiedBy {
            get {
                return this.ModifiedByField;
            }
            set {
                if ((object.ReferenceEquals(this.ModifiedByField, value) != true)) {
                    this.ModifiedByField = value;
                    this.RaisePropertyChanged("ModifiedBy");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModifiedDate {
            get {
                return this.ModifiedDateField;
            }
            set {
                if ((this.ModifiedDateField.Equals(value) != true)) {
                    this.ModifiedDateField = value;
                    this.RaisePropertyChanged("ModifiedDate");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Note {
            get {
                return this.NoteField;
            }
            set {
                if ((object.ReferenceEquals(this.NoteField, value) != true)) {
                    this.NoteField = value;
                    this.RaisePropertyChanged("Note");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Resources {
            get {
                return this.ResourcesField;
            }
            set {
                if ((object.ReferenceEquals(this.ResourcesField, value) != true)) {
                    this.ResourcesField = value;
                    this.RaisePropertyChanged("Resources");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RevisionId {
            get {
                return this.RevisionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionIdField, value) != true)) {
                    this.RevisionIdField = value;
                    this.RaisePropertyChanged("RevisionId");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public ExampleRepoClient.RepositoryServer.RepositoryState State {
            get {
                return this.StateField;
            }
            set {
                if ((this.StateField.Equals(value) != true)) {
                    this.StateField = value;
                    this.RaisePropertyChanged("State");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="ModuleReference", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class ModuleReference : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ModuleNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private System.DateTime ModuleUpdateDateField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ModuleName {
            get {
                return this.ModuleNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ModuleNameField, value) != true)) {
                    this.ModuleNameField = value;
                    this.RaisePropertyChanged("ModuleName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public System.DateTime ModuleUpdateDate {
            get {
                return this.ModuleUpdateDateField;
            }
            set {
                if ((this.ModuleUpdateDateField.Equals(value) != true)) {
                    this.ModuleUpdateDateField = value;
                    this.RaisePropertyChanged("ModuleUpdateDate");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="RepositoryReference", Namespace="http://schemas.datacontract.org/2004/07/Decisions.DesignerRepository")]
    [System.SerializableAttribute()]
    public partial class RepositoryReference : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string BranchNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string ProjectNameField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string RevisionIdField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string BranchName {
            get {
                return this.BranchNameField;
            }
            set {
                if ((object.ReferenceEquals(this.BranchNameField, value) != true)) {
                    this.BranchNameField = value;
                    this.RaisePropertyChanged("BranchName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ProjectName {
            get {
                return this.ProjectNameField;
            }
            set {
                if ((object.ReferenceEquals(this.ProjectNameField, value) != true)) {
                    this.ProjectNameField = value;
                    this.RaisePropertyChanged("ProjectName");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string RevisionId {
            get {
                return this.RevisionIdField;
            }
            set {
                if ((object.ReferenceEquals(this.RevisionIdField, value) != true)) {
                    this.RevisionIdField = value;
                    this.RaisePropertyChanged("RevisionId");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="RepositoryServer.IDesignerRepositoryService")]
    public interface IDesignerRepositoryService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModules", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModulesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        string[] GetModules(ExampleRepoClient.RepositoryServer.AbstractUserContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModules", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModulesResponse")]
        System.Threading.Tasks.Task<string[]> GetModulesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetBranches", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetBranchesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        string[] GetBranches(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetBranches", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetBranchesResponse")]
        System.Threading.Tasks.Task<string[]> GetBranchesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleResources", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleInfoFile[] GetModuleResources(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleResources", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfoFile[]> GetModuleResourcesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesAsOfRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesAsOfRevisionRespo" +
            "nse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleInfoFile[] GetModuleResourcesAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesAsOfRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesAsOfRevisionRespo" +
            "nse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfoFile[]> GetModuleResourcesAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesAsOfDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleInfoFile[] GetModuleResourcesAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleResourcesAsOfDateResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfoFile[]> GetModuleResourcesAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, System.DateTime dateTime);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleInfo", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleInfo GetModuleInfo(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleInfo", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleInfoResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfo> GetModuleInfoAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleGeneralInfo", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleGeneralInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleInfo GetModuleGeneralInfo(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleGeneralInfo", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleGeneralInfoResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfo> GetModuleGeneralInfoAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetCheckinData", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetCheckinDataResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.FileCheckinInfo[] GetCheckinData(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string typeName, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetCheckinData", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetCheckinDataResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileCheckinInfo[]> GetCheckinDataAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string typeName, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CreateModule", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CreateModuleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void CreateModule(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CreateModule", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CreateModuleResponse")]
        System.Threading.Tasks.Task CreateModuleAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CreateBranch", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CreateBranchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void CreateBranch(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string fromBranch, string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CreateBranch", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CreateBranchResponse")]
        System.Threading.Tasks.Task CreateBranchAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string fromBranch, string branchName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetPreview", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetPreviewResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.FileData GetPreview(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetPreview", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetPreviewResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetPreviewAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetPreviewAsOfRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetPreviewAsOfRevisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.FileData GetPreviewAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, string asOfRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetPreviewAsOfRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetPreviewAsOfRevisionResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetPreviewAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, string asOfRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetPreviewAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetPreviewAsOfDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.FileData GetPreviewAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, System.DateTime asOfDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetPreviewAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetPreviewAsOfDateResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetPreviewAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, System.DateTime asOfDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.FileData GetModuleFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleFileResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetModuleFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleFileAsOfRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleFileAsOfRevisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.FileData GetModuleFileAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, string asOfRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleFileAsOfRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleFileAsOfRevisionResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetModuleFileAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, string asOfRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleFileAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleFileAsOfDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.FileData GetModuleFileAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, System.DateTime asOfDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleFileAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleFileAsOfDateResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetModuleFileAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, System.DateTime asOfDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/TagModule", ReplyAction="http://tempuri.org/IDesignerRepositoryService/TagModuleResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void TagModule(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, ExampleRepoClient.RepositoryServer.RepositoryState state, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/TagModule", ReplyAction="http://tempuri.org/IDesignerRepositoryService/TagModuleResponse")]
        System.Threading.Tasks.Task TagModuleAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, ExampleRepoClient.RepositoryServer.RepositoryState state, string name);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/StartCheckin", ReplyAction="http://tempuri.org/IDesignerRepositoryService/StartCheckinResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        string StartCheckin(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/StartCheckin", ReplyAction="http://tempuri.org/IDesignerRepositoryService/StartCheckinResponse")]
        System.Threading.Tasks.Task<string> StartCheckinAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/Commit", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CommitResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void Commit(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/Commit", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CommitResponse")]
        System.Threading.Tasks.Task CommitAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/Cancel", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CancelResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void Cancel(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/Cancel", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CancelResponse")]
        System.Threading.Tasks.Task CancelAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/DeleteModuleFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/DeleteModuleFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void DeleteModuleFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, string typeName, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/DeleteModuleFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/DeleteModuleFileResponse")]
        System.Threading.Tasks.Task DeleteModuleFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, string typeName, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/UpdateModuleFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/UpdateModuleFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void UpdateModuleFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, string fromRevisionId, string typeName, string id, string entityName, string path, ExampleRepoClient.RepositoryServer.FileData data, ExampleRepoClient.RepositoryServer.FileData previewData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/UpdateModuleFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/UpdateModuleFileResponse")]
        System.Threading.Tasks.Task UpdateModuleFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, string fromRevisionId, string typeName, string id, string entityName, string path, ExampleRepoClient.RepositoryServer.FileData data, ExampleRepoClient.RepositoryServer.FileData previewData);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CopyToBranch", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CopyToBranchResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void CopyToBranch(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string fromBranch, string toBranch, string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CopyToBranch", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CopyToBranchResponse")]
        System.Threading.Tasks.Task CopyToBranchAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string fromBranch, string toBranch, string type, string id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/RevertCheckin", ReplyAction="http://tempuri.org/IDesignerRepositoryService/RevertCheckinResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void RevertCheckin(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/RevertCheckin", ReplyAction="http://tempuri.org/IDesignerRepositoryService/RevertCheckinResponse")]
        System.Threading.Tasks.Task RevertCheckinAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/RollbackModuleToRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/RollbackModuleToRevisionResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void RollbackModuleToRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string toRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/RollbackModuleToRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/RollbackModuleToRevisionResponse")]
        System.Threading.Tasks.Task RollbackModuleToRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string toRevisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/RollbackModuleToDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/RollbackModuleToDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void RollbackModuleToDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, System.DateTime revisionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/RollbackModuleToDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/RollbackModuleToDateResponse")]
        System.Threading.Tasks.Task RollbackModuleToDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, System.DateTime revisionDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfos", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[] GetCheckinInfos(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfos", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[]> GetCheckinInfosAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, int count);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosAfterRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosAfterRevisionRespons" +
            "e")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[] GetCheckinInfosAfterRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosAfterRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosAfterRevisionRespons" +
            "e")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[]> GetCheckinInfosAfterRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosAfterDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosAfterDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[] GetCheckinInfosAfterDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosAfterDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetCheckinInfosAfterDateResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[]> GetCheckinInfosAfterDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetResourcesInfoForRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetResourcesInfoForRevisionResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ResourceCheckinInfo[] GetResourcesInfoForRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetResourcesInfoForRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetResourcesInfoForRevisionResponse" +
            "")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ResourceCheckinInfo[]> GetResourcesInfoForRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/Ping", ReplyAction="http://tempuri.org/IDesignerRepositoryService/PingResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void Ping(ExampleRepoClient.RepositoryServer.AbstractUserContext userContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/Ping", ReplyAction="http://tempuri.org/IDesignerRepositoryService/PingResponse")]
        System.Threading.Tasks.Task PingAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext userContext);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/PingWithoutUserContext", ReplyAction="http://tempuri.org/IDesignerRepositoryService/PingWithoutUserContextResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void PingWithoutUserContext();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/PingWithoutUserContext", ReplyAction="http://tempuri.org/IDesignerRepositoryService/PingWithoutUserContextResponse")]
        System.Threading.Tasks.Task PingWithoutUserContextAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetAllServerNames", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetAllServerNamesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        string[] GetAllServerNames(ExampleRepoClient.RepositoryServer.AbstractUserContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetAllServerNames", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetAllServerNamesResponse")]
        System.Threading.Tasks.Task<string[]> GetAllServerNamesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/StartServerStateCheckin", ReplyAction="http://tempuri.org/IDesignerRepositoryService/StartServerStateCheckinResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        string StartServerStateCheckin(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string serverName, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/StartServerStateCheckin", ReplyAction="http://tempuri.org/IDesignerRepositoryService/StartServerStateCheckinResponse")]
        System.Threading.Tasks.Task<string> StartServerStateCheckinAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string serverName, string notes);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/UpdateModuleList", ReplyAction="http://tempuri.org/IDesignerRepositoryService/UpdateModuleListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void UpdateModuleList(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, ExampleRepoClient.RepositoryServer.ModuleReference[] reference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/UpdateModuleList", ReplyAction="http://tempuri.org/IDesignerRepositoryService/UpdateModuleListResponse")]
        System.Threading.Tasks.Task UpdateModuleListAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, ExampleRepoClient.RepositoryServer.ModuleReference[] reference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleReferences", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleReference[] GetModuleReferences(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleReferences", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleReference[]> GetModuleReferencesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesAsOfRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesAsOfRevisionResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleReference[] GetModuleReferencesAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesAsOfRevision", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesAsOfRevisionResp" +
            "onse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleReference[]> GetModuleReferencesAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesAsOfDateResponse" +
            "")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ModuleReference[] GetModuleReferencesAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetModuleReferencesAsOfDateResponse" +
            "")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleReference[]> GetModuleReferencesAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/UpdateRepositoryReference", ReplyAction="http://tempuri.org/IDesignerRepositoryService/UpdateRepositoryReferenceResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void UpdateRepositoryReference(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, ExampleRepoClient.RepositoryServer.RepositoryReference[] reference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/UpdateRepositoryReference", ReplyAction="http://tempuri.org/IDesignerRepositoryService/UpdateRepositoryReferenceResponse")]
        System.Threading.Tasks.Task UpdateRepositoryReferenceAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, ExampleRepoClient.RepositoryServer.RepositoryReference[] reference);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferences", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.RepositoryReference[] GetRepositoryReferences(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferences", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.RepositoryReference[]> GetRepositoryReferencesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesAsOfRevision" +
            "", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesAsOfRevision" +
            "Response")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.RepositoryReference[] GetRepositoryReferencesAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesAsOfRevision" +
            "", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesAsOfRevision" +
            "Response")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.RepositoryReference[]> GetRepositoryReferencesAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesAsOfDateResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.RepositoryReference[] GetRepositoryReferencesAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesAsOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetRepositoryReferencesAsOfDateResp" +
            "onse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.RepositoryReference[]> GetRepositoryReferencesAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/UpdateServerFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/UpdateServerFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void UpdateServerFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId, ExampleRepoClient.RepositoryServer.ServerFileData file, string resourceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/UpdateServerFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/UpdateServerFileResponse")]
        System.Threading.Tasks.Task UpdateServerFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId, ExampleRepoClient.RepositoryServer.ServerFileData file, string resourceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetServerFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetServerFileResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ServerFileData GetServerFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetServerFile", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetServerFileResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ServerFileData> GetServerFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetServerFileList", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetServerFileListResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ServerModuleInfoFile[] GetServerFileList(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetServerFileList", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetServerFileListResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ServerModuleInfoFile[]> GetServerFileListAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetServerFileInfo", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetServerFileInfoResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ServerModuleInfoFile GetServerFileInfo(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetServerFileInfo", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetServerFileInfoResponse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ServerModuleInfoFile> GetServerFileInfoAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string fileName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetServerFileListByResourceType", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetServerFileListByResourceTypeResp" +
            "onse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        ExampleRepoClient.RepositoryServer.ServerModuleInfoFile[] GetServerFileListByResourceType(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string resourceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/GetServerFileListByResourceType", ReplyAction="http://tempuri.org/IDesignerRepositoryService/GetServerFileListByResourceTypeResp" +
            "onse")]
        System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ServerModuleInfoFile[]> GetServerFileListByResourceTypeAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string resourceType);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/StartCheckout", ReplyAction="http://tempuri.org/IDesignerRepositoryService/StartCheckoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        string StartCheckout(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/StartCheckout", ReplyAction="http://tempuri.org/IDesignerRepositoryService/StartCheckoutResponse")]
        System.Threading.Tasks.Task<string> StartCheckoutAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string revisionId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/StartCheckoutOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/StartCheckoutOfDateResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        string StartCheckoutOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/StartCheckoutOfDate", ReplyAction="http://tempuri.org/IDesignerRepositoryService/StartCheckoutOfDateResponse")]
        System.Threading.Tasks.Task<string> StartCheckoutOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, System.DateTime date);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CommitCheckout", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CommitCheckoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void CommitCheckout(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string checkoutId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CommitCheckout", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CommitCheckoutResponse")]
        System.Threading.Tasks.Task CommitCheckoutAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string checkoutId);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CancelCheckout", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CancelCheckoutResponse")]
        [System.ServiceModel.FaultContractAttribute(typeof(ExampleRepoClient.RepositoryServer.FrameworkFault), Action="http://tempuri.org/FrameworkFaultAction", Name="FrameworkFault", Namespace="http://schemas.datacontract.org/2004/07/DecisionsFramework.ServiceLayer.Utilities" +
            "")]
        void CancelCheckout(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string checkoutId, string errorMessage);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IDesignerRepositoryService/CancelCheckout", ReplyAction="http://tempuri.org/IDesignerRepositoryService/CancelCheckoutResponse")]
        System.Threading.Tasks.Task CancelCheckoutAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string checkoutId, string errorMessage);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IDesignerRepositoryServiceChannel : ExampleRepoClient.RepositoryServer.IDesignerRepositoryService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class DesignerRepositoryServiceClient : System.ServiceModel.ClientBase<ExampleRepoClient.RepositoryServer.IDesignerRepositoryService>, ExampleRepoClient.RepositoryServer.IDesignerRepositoryService {
        
        public DesignerRepositoryServiceClient() {
        }
        
        public DesignerRepositoryServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public DesignerRepositoryServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DesignerRepositoryServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public DesignerRepositoryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public string[] GetModules(ExampleRepoClient.RepositoryServer.AbstractUserContext context) {
            return base.Channel.GetModules(context);
        }
        
        public System.Threading.Tasks.Task<string[]> GetModulesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context) {
            return base.Channel.GetModulesAsync(context);
        }
        
        public string[] GetBranches(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName) {
            return base.Channel.GetBranches(context, moduleName);
        }
        
        public System.Threading.Tasks.Task<string[]> GetBranchesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName) {
            return base.Channel.GetBranchesAsync(context, moduleName);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleInfoFile[] GetModuleResources(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName) {
            return base.Channel.GetModuleResources(context, moduleName, branchName);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfoFile[]> GetModuleResourcesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName) {
            return base.Channel.GetModuleResourcesAsync(context, moduleName, branchName);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleInfoFile[] GetModuleResourcesAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId) {
            return base.Channel.GetModuleResourcesAsOfRevision(context, moduleName, branchName, revisionId);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfoFile[]> GetModuleResourcesAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId) {
            return base.Channel.GetModuleResourcesAsOfRevisionAsync(context, moduleName, branchName, revisionId);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleInfoFile[] GetModuleResourcesAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, System.DateTime dateTime) {
            return base.Channel.GetModuleResourcesAsOfDate(context, moduleName, branchName, dateTime);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfoFile[]> GetModuleResourcesAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, System.DateTime dateTime) {
            return base.Channel.GetModuleResourcesAsOfDateAsync(context, moduleName, branchName, dateTime);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleInfo GetModuleInfo(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName) {
            return base.Channel.GetModuleInfo(context, moduleName, branchName);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfo> GetModuleInfoAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName) {
            return base.Channel.GetModuleInfoAsync(context, moduleName, branchName);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleInfo GetModuleGeneralInfo(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName) {
            return base.Channel.GetModuleGeneralInfo(context, moduleName, branchName);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleInfo> GetModuleGeneralInfoAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName) {
            return base.Channel.GetModuleGeneralInfoAsync(context, moduleName, branchName);
        }
        
        public ExampleRepoClient.RepositoryServer.FileCheckinInfo[] GetCheckinData(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string typeName, string id) {
            return base.Channel.GetCheckinData(context, moduleName, branchName, typeName, id);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileCheckinInfo[]> GetCheckinDataAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string typeName, string id) {
            return base.Channel.GetCheckinDataAsync(context, moduleName, branchName, typeName, id);
        }
        
        public void CreateModule(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName) {
            base.Channel.CreateModule(context, sessionInfo, moduleName);
        }
        
        public System.Threading.Tasks.Task CreateModuleAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName) {
            return base.Channel.CreateModuleAsync(context, sessionInfo, moduleName);
        }
        
        public void CreateBranch(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string fromBranch, string branchName) {
            base.Channel.CreateBranch(context, sessionInfo, moduleName, fromBranch, branchName);
        }
        
        public System.Threading.Tasks.Task CreateBranchAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string fromBranch, string branchName) {
            return base.Channel.CreateBranchAsync(context, sessionInfo, moduleName, fromBranch, branchName);
        }
        
        public ExampleRepoClient.RepositoryServer.FileData GetPreview(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id) {
            return base.Channel.GetPreview(context, moduleName, branchName, type, id);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetPreviewAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id) {
            return base.Channel.GetPreviewAsync(context, moduleName, branchName, type, id);
        }
        
        public ExampleRepoClient.RepositoryServer.FileData GetPreviewAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, string asOfRevisionId) {
            return base.Channel.GetPreviewAsOfRevision(context, moduleName, branchName, type, id, asOfRevisionId);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetPreviewAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, string asOfRevisionId) {
            return base.Channel.GetPreviewAsOfRevisionAsync(context, moduleName, branchName, type, id, asOfRevisionId);
        }
        
        public ExampleRepoClient.RepositoryServer.FileData GetPreviewAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, System.DateTime asOfDate) {
            return base.Channel.GetPreviewAsOfDate(context, moduleName, branchName, type, id, asOfDate);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetPreviewAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, System.DateTime asOfDate) {
            return base.Channel.GetPreviewAsOfDateAsync(context, moduleName, branchName, type, id, asOfDate);
        }
        
        public ExampleRepoClient.RepositoryServer.FileData GetModuleFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id) {
            return base.Channel.GetModuleFile(context, moduleName, branchName, type, id);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetModuleFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id) {
            return base.Channel.GetModuleFileAsync(context, moduleName, branchName, type, id);
        }
        
        public ExampleRepoClient.RepositoryServer.FileData GetModuleFileAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, string asOfRevisionId) {
            return base.Channel.GetModuleFileAsOfRevision(context, moduleName, branchName, type, id, asOfRevisionId);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetModuleFileAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, string asOfRevisionId) {
            return base.Channel.GetModuleFileAsOfRevisionAsync(context, moduleName, branchName, type, id, asOfRevisionId);
        }
        
        public ExampleRepoClient.RepositoryServer.FileData GetModuleFileAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, System.DateTime asOfDate) {
            return base.Channel.GetModuleFileAsOfDate(context, moduleName, branchName, type, id, asOfDate);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.FileData> GetModuleFileAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string type, string id, System.DateTime asOfDate) {
            return base.Channel.GetModuleFileAsOfDateAsync(context, moduleName, branchName, type, id, asOfDate);
        }
        
        public void TagModule(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, ExampleRepoClient.RepositoryServer.RepositoryState state, string name) {
            base.Channel.TagModule(context, sessionInfo, moduleName, branchName, state, name);
        }
        
        public System.Threading.Tasks.Task TagModuleAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, ExampleRepoClient.RepositoryServer.RepositoryState state, string name) {
            return base.Channel.TagModuleAsync(context, sessionInfo, moduleName, branchName, state, name);
        }
        
        public string StartCheckin(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string notes) {
            return base.Channel.StartCheckin(context, sessionInfo, moduleName, branchName, notes);
        }
        
        public System.Threading.Tasks.Task<string> StartCheckinAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string notes) {
            return base.Channel.StartCheckinAsync(context, sessionInfo, moduleName, branchName, notes);
        }
        
        public void Commit(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId) {
            base.Channel.Commit(context, revisionId);
        }
        
        public System.Threading.Tasks.Task CommitAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId) {
            return base.Channel.CommitAsync(context, revisionId);
        }
        
        public void Cancel(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId) {
            base.Channel.Cancel(context, revisionId);
        }
        
        public System.Threading.Tasks.Task CancelAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId) {
            return base.Channel.CancelAsync(context, revisionId);
        }
        
        public void DeleteModuleFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, string typeName, string id) {
            base.Channel.DeleteModuleFile(context, revisionId, typeName, id);
        }
        
        public System.Threading.Tasks.Task DeleteModuleFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, string typeName, string id) {
            return base.Channel.DeleteModuleFileAsync(context, revisionId, typeName, id);
        }
        
        public void UpdateModuleFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, string fromRevisionId, string typeName, string id, string entityName, string path, ExampleRepoClient.RepositoryServer.FileData data, ExampleRepoClient.RepositoryServer.FileData previewData) {
            base.Channel.UpdateModuleFile(context, revisionId, fromRevisionId, typeName, id, entityName, path, data, previewData);
        }
        
        public System.Threading.Tasks.Task UpdateModuleFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, string fromRevisionId, string typeName, string id, string entityName, string path, ExampleRepoClient.RepositoryServer.FileData data, ExampleRepoClient.RepositoryServer.FileData previewData) {
            return base.Channel.UpdateModuleFileAsync(context, revisionId, fromRevisionId, typeName, id, entityName, path, data, previewData);
        }
        
        public void CopyToBranch(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string fromBranch, string toBranch, string type, string id) {
            base.Channel.CopyToBranch(context, sessionInfo, moduleName, fromBranch, toBranch, type, id);
        }
        
        public System.Threading.Tasks.Task CopyToBranchAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string fromBranch, string toBranch, string type, string id) {
            return base.Channel.CopyToBranchAsync(context, sessionInfo, moduleName, fromBranch, toBranch, type, id);
        }
        
        public void RevertCheckin(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId) {
            base.Channel.RevertCheckin(context, moduleName, branchName, revisionId);
        }
        
        public System.Threading.Tasks.Task RevertCheckinAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId) {
            return base.Channel.RevertCheckinAsync(context, moduleName, branchName, revisionId);
        }
        
        public void RollbackModuleToRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string toRevisionId) {
            base.Channel.RollbackModuleToRevision(context, sessionInfo, moduleName, branchName, toRevisionId);
        }
        
        public System.Threading.Tasks.Task RollbackModuleToRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string toRevisionId) {
            return base.Channel.RollbackModuleToRevisionAsync(context, sessionInfo, moduleName, branchName, toRevisionId);
        }
        
        public void RollbackModuleToDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, System.DateTime revisionDate) {
            base.Channel.RollbackModuleToDate(context, sessionInfo, moduleName, branchName, revisionDate);
        }
        
        public System.Threading.Tasks.Task RollbackModuleToDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, System.DateTime revisionDate) {
            return base.Channel.RollbackModuleToDateAsync(context, sessionInfo, moduleName, branchName, revisionDate);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[] GetCheckinInfos(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, int count) {
            return base.Channel.GetCheckinInfos(context, moduleName, branchName, count);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[]> GetCheckinInfosAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, int count) {
            return base.Channel.GetCheckinInfosAsync(context, moduleName, branchName, count);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[] GetCheckinInfosAfterRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId) {
            return base.Channel.GetCheckinInfosAfterRevision(context, moduleName, branchName, revisionId);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[]> GetCheckinInfosAfterRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId) {
            return base.Channel.GetCheckinInfosAfterRevisionAsync(context, moduleName, branchName, revisionId);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[] GetCheckinInfosAfterDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, System.DateTime date) {
            return base.Channel.GetCheckinInfosAfterDate(context, moduleName, branchName, date);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleCheckinInfo[]> GetCheckinInfosAfterDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, System.DateTime date) {
            return base.Channel.GetCheckinInfosAfterDateAsync(context, moduleName, branchName, date);
        }
        
        public ExampleRepoClient.RepositoryServer.ResourceCheckinInfo[] GetResourcesInfoForRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId) {
            return base.Channel.GetResourcesInfoForRevision(context, moduleName, branchName, revisionId);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ResourceCheckinInfo[]> GetResourcesInfoForRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string moduleName, string branchName, string revisionId) {
            return base.Channel.GetResourcesInfoForRevisionAsync(context, moduleName, branchName, revisionId);
        }
        
        public void Ping(ExampleRepoClient.RepositoryServer.AbstractUserContext userContext) {
            base.Channel.Ping(userContext);
        }
        
        public System.Threading.Tasks.Task PingAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext userContext) {
            return base.Channel.PingAsync(userContext);
        }
        
        public void PingWithoutUserContext() {
            base.Channel.PingWithoutUserContext();
        }
        
        public System.Threading.Tasks.Task PingWithoutUserContextAsync() {
            return base.Channel.PingWithoutUserContextAsync();
        }
        
        public string[] GetAllServerNames(ExampleRepoClient.RepositoryServer.AbstractUserContext context) {
            return base.Channel.GetAllServerNames(context);
        }
        
        public System.Threading.Tasks.Task<string[]> GetAllServerNamesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context) {
            return base.Channel.GetAllServerNamesAsync(context);
        }
        
        public string StartServerStateCheckin(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string serverName, string notes) {
            return base.Channel.StartServerStateCheckin(context, sessionInfo, serverName, notes);
        }
        
        public System.Threading.Tasks.Task<string> StartServerStateCheckinAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string serverName, string notes) {
            return base.Channel.StartServerStateCheckinAsync(context, sessionInfo, serverName, notes);
        }
        
        public void UpdateModuleList(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, ExampleRepoClient.RepositoryServer.ModuleReference[] reference) {
            base.Channel.UpdateModuleList(context, revisionId, reference);
        }
        
        public System.Threading.Tasks.Task UpdateModuleListAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, ExampleRepoClient.RepositoryServer.ModuleReference[] reference) {
            return base.Channel.UpdateModuleListAsync(context, revisionId, reference);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleReference[] GetModuleReferences(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName) {
            return base.Channel.GetModuleReferences(context, serverName);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleReference[]> GetModuleReferencesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName) {
            return base.Channel.GetModuleReferencesAsync(context, serverName);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleReference[] GetModuleReferencesAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId) {
            return base.Channel.GetModuleReferencesAsOfRevision(context, serverName, revisionId);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleReference[]> GetModuleReferencesAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId) {
            return base.Channel.GetModuleReferencesAsOfRevisionAsync(context, serverName, revisionId);
        }
        
        public ExampleRepoClient.RepositoryServer.ModuleReference[] GetModuleReferencesAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, System.DateTime date) {
            return base.Channel.GetModuleReferencesAsOfDate(context, serverName, date);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ModuleReference[]> GetModuleReferencesAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, System.DateTime date) {
            return base.Channel.GetModuleReferencesAsOfDateAsync(context, serverName, date);
        }
        
        public void UpdateRepositoryReference(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, ExampleRepoClient.RepositoryServer.RepositoryReference[] reference) {
            base.Channel.UpdateRepositoryReference(context, revisionId, reference);
        }
        
        public System.Threading.Tasks.Task UpdateRepositoryReferenceAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string revisionId, ExampleRepoClient.RepositoryServer.RepositoryReference[] reference) {
            return base.Channel.UpdateRepositoryReferenceAsync(context, revisionId, reference);
        }
        
        public ExampleRepoClient.RepositoryServer.RepositoryReference[] GetRepositoryReferences(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName) {
            return base.Channel.GetRepositoryReferences(context, serverName);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.RepositoryReference[]> GetRepositoryReferencesAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName) {
            return base.Channel.GetRepositoryReferencesAsync(context, serverName);
        }
        
        public ExampleRepoClient.RepositoryServer.RepositoryReference[] GetRepositoryReferencesAsOfRevision(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId) {
            return base.Channel.GetRepositoryReferencesAsOfRevision(context, serverName, revisionId);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.RepositoryReference[]> GetRepositoryReferencesAsOfRevisionAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId) {
            return base.Channel.GetRepositoryReferencesAsOfRevisionAsync(context, serverName, revisionId);
        }
        
        public ExampleRepoClient.RepositoryServer.RepositoryReference[] GetRepositoryReferencesAsOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, System.DateTime date) {
            return base.Channel.GetRepositoryReferencesAsOfDate(context, serverName, date);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.RepositoryReference[]> GetRepositoryReferencesAsOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, System.DateTime date) {
            return base.Channel.GetRepositoryReferencesAsOfDateAsync(context, serverName, date);
        }
        
        public void UpdateServerFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId, ExampleRepoClient.RepositoryServer.ServerFileData file, string resourceType) {
            base.Channel.UpdateServerFile(context, serverName, revisionId, file, resourceType);
        }
        
        public System.Threading.Tasks.Task UpdateServerFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string revisionId, ExampleRepoClient.RepositoryServer.ServerFileData file, string resourceType) {
            return base.Channel.UpdateServerFileAsync(context, serverName, revisionId, file, resourceType);
        }
        
        public ExampleRepoClient.RepositoryServer.ServerFileData GetServerFile(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string fileName) {
            return base.Channel.GetServerFile(context, serverName, fileName);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ServerFileData> GetServerFileAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string fileName) {
            return base.Channel.GetServerFileAsync(context, serverName, fileName);
        }
        
        public ExampleRepoClient.RepositoryServer.ServerModuleInfoFile[] GetServerFileList(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName) {
            return base.Channel.GetServerFileList(context, serverName);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ServerModuleInfoFile[]> GetServerFileListAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName) {
            return base.Channel.GetServerFileListAsync(context, serverName);
        }
        
        public ExampleRepoClient.RepositoryServer.ServerModuleInfoFile GetServerFileInfo(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string fileName) {
            return base.Channel.GetServerFileInfo(context, serverName, fileName);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ServerModuleInfoFile> GetServerFileInfoAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string fileName) {
            return base.Channel.GetServerFileInfoAsync(context, serverName, fileName);
        }
        
        public ExampleRepoClient.RepositoryServer.ServerModuleInfoFile[] GetServerFileListByResourceType(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string resourceType) {
            return base.Channel.GetServerFileListByResourceType(context, serverName, resourceType);
        }
        
        public System.Threading.Tasks.Task<ExampleRepoClient.RepositoryServer.ServerModuleInfoFile[]> GetServerFileListByResourceTypeAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string serverName, string resourceType) {
            return base.Channel.GetServerFileListByResourceTypeAsync(context, serverName, resourceType);
        }
        
        public string StartCheckout(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string revisionId) {
            return base.Channel.StartCheckout(context, sessionInfo, moduleName, branchName, revisionId);
        }
        
        public System.Threading.Tasks.Task<string> StartCheckoutAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, string revisionId) {
            return base.Channel.StartCheckoutAsync(context, sessionInfo, moduleName, branchName, revisionId);
        }
        
        public string StartCheckoutOfDate(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, System.DateTime date) {
            return base.Channel.StartCheckoutOfDate(context, sessionInfo, moduleName, branchName, date);
        }
        
        public System.Threading.Tasks.Task<string> StartCheckoutOfDateAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, ExampleRepoClient.RepositoryServer.SessionClientInfo sessionInfo, string moduleName, string branchName, System.DateTime date) {
            return base.Channel.StartCheckoutOfDateAsync(context, sessionInfo, moduleName, branchName, date);
        }
        
        public void CommitCheckout(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string checkoutId) {
            base.Channel.CommitCheckout(context, checkoutId);
        }
        
        public System.Threading.Tasks.Task CommitCheckoutAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string checkoutId) {
            return base.Channel.CommitCheckoutAsync(context, checkoutId);
        }
        
        public void CancelCheckout(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string checkoutId, string errorMessage) {
            base.Channel.CancelCheckout(context, checkoutId, errorMessage);
        }
        
        public System.Threading.Tasks.Task CancelCheckoutAsync(ExampleRepoClient.RepositoryServer.AbstractUserContext context, string checkoutId, string errorMessage) {
            return base.Channel.CancelCheckoutAsync(context, checkoutId, errorMessage);
        }
    }
}
